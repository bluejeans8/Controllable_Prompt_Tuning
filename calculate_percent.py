
# examples = []

# with open("result_gpt2_large.txt",'r') as rf:
#     for l in rf.readlines():
#         a = l.split(',')[2]
#         examples.append(int(a))

# a = [957, 843, 468, 203, 588, 882, 619, 911, 434, 900, 180, 950, 756, 817, 756, 959, 775, 858, 801, 857, 53, 671, 951, 958, 652, 808, 956, 853, 821, 378, 485, 766, 780, 664, 471, 573, 513, 919, 903, 905, 924]
# #756

# print(set([x for x in a if a.count(x) > 1]))

# result = {}

# with open("results/results/bbc_by_relation.txt", "r") as rf:
#     for l in rf.readlines():
#         lst = l.split(',')
#         for i in range(0,41):
#             k = lst[2]
#             if a[i] == int(k):
#                 result[i+1] = lst[3]

# for key in sorted(result):
#     print(key, result[key])
        


# results = [862, 139, 350, 147, 381, 619, 335, 543, 355, 576, 106, 39, 412, 313, 338, 896, 345, 591, 307, 615, 1, 39, 408, 464, 191, 318, 328, 414, 326, 38, 343, 391, 185, 568, 277, 111, 241, 825, 598, 373, 734]


# percents = {}
# for i in range(0,41):
#     percents[i+1] = results[i]/examples[i]

# for i in range(1,42):
#     # if percents[i] < 0.3:
#         print(i,percents[i])


j_tuning = {1: 0.9007314524555904, 2: 0.16488730723606168, 3: 0.7478632478632479, 4: 0.7241379310344828,
5: 0.6479591836734694, 6: 0.7018140589569161, 7: 0.5411954765751211, 8: 0.5960482985729967,
9: 0.8179723502304147, 10: 0.64, 11: 0.5888888888888889, 12: 0.04105263157894737,
13: 0.544973544973545, 14: 0.38310893512851896, 15: 0.4470899470899471, 16: 0.9343065693430657,
17: 0.44516129032258067, 18: 0.6888111888111889, 19: 0.383270911360799, 20: 0.7176196032672112,
21: 0.018867924528301886, 22: 0.05812220566318927, 23: 0.42902208201892744, 24: 0.48434237995824636,
25: 0.2929447852760736, 26: 0.3935643564356436, 27: 0.34309623430962344, 28: 0.48534583821805394,
29: 0.39707673568818513, 30: 0.10052910052910052, 31: 0.7072164948453609, 32: 0.5104438642297651,
33: 0.23717948717948717, 34: 0.8554216867469879, 35: 0.5881104033970276, 36: 0.193717277486911,
37: 0.4697855750487329, 38: 0.8977149075081611, 39: 0.6622369878183831, 40: 0.4121546961325967, 41: 0.7943722943722944}

p_tuning = {1: 0.9007314524555904, 2: 0.16844602609727166, 3: 0.7264957264957265, 4: 0.7192118226600985, 5: 0.6428571428571429, 6: 0.6689342403628118, 7: 0.5379644588045234, 8: 0.5916575192096597, 9: 0.7926267281105991, 10: 0.5577777777777778, 11: 0.5666666666666667, 12: 0.037894736842105266, 13: 0.5529100529100529, 14: 0.38555691554467564, 15: 0.46296296296296297, 16: 0.9259645464025026, 17: 0.4335483870967742, 18: 0.6958041958041958, 19: 0.36704119850187267, 20: 0.7187864644107351, 21: 0.018867924528301886, 22: 0.04918032786885246, 23: 0.4363827549947424, 24: 0.4812108559498956, 25: 0.28067484662576686, 26: 0.3774752475247525, 27: 0.34205020920502094, 28: 0.5005861664712778, 29: 0.37149817295980514, 30: 0.09523809523809523, 31: 0.7051546391752578, 32: 0.4856396866840731, 33: 0.2358974358974359, 34: 0.8524096385542169, 35: 0.583864118895966, 36: 0.18150087260034903, 37: 0.4327485380116959, 38: 0.8846572361262242, 39: 0.6522702104097453, 40: 0.41104972375690607, 41: 0.791125541125541}

for i in range(1,42):
    if j_tuning[i] - p_tuning[i] <= 0:
        print(i, j_tuning[i] - p_tuning[i])



# with open("/home/tjrals/jinseok/Prompting/results/results/by_relation.txt",'r') as rf:
#     i = 0
#     for l in rf.readlines():
#         i+=1
#         a = l.split('  ')[1][:-1]
#         p_tuning[i] = float(a)
# print(p_tuning)




# 1  0.9007314524555904
# 2  0.16844602609727166
# 3  0.7264957264957265
# 4  0.7192118226600985
# 5  0.6428571428571429
# 6  0.6689342403628118
# 7  0.5379644588045234
# 8  0.5916575192096597
# 9  0.7926267281105991
# 10  0.5577777777777778
# 11  0.5666666666666667
# 12  0.037894736842105266
# 13  0.5529100529100529
# 14  0.38555691554467564
# 15  0.46296296296296297
# 16  0.9259645464025026
# 17  0.4335483870967742
# 18  0.6958041958041958
# 19  0.36704119850187267
# 20  0.7187864644107351
# 21  0.018867924528301886
# 22  0.04918032786885246
# 23  0.4363827549947424
# 24  0.4812108559498956
# 25  0.28067484662576686
# 26  0.3774752475247525
# 27  0.34205020920502094
# 28  0.5005861664712778
# 29  0.37149817295980514
# 30  0.09523809523809523
# 31  0.7051546391752578
# 32  0.4856396866840731
# 33  0.2358974358974359
# 34  0.8524096385542169
# 35  0.583864118895966
# 36  0.18150087260034903
# 37  0.4327485380116959
# 38  0.8846572361262242
# 39  0.6522702104097453
# 40  0.41104972375690607
# 41  0.7911255411255411